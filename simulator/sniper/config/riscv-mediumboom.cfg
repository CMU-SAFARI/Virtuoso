[general]
arch = riscv
enable_icache_modeling = true
mode = 64
syntax = default
#total_cores = 2

[perf_model/core]
core_model = riscv
frequency = 2
type = rob # or interval
logical_cpus = 1 # Number of SMT threads per core

[perf_model/core/rob_timer]   # https://github.com/ucb-bar/riscv-boom/blob/master/src/main/scala/common/configs.scala
address_disambiguation = true  # Allow loads to bypass preceding stores with an unknown address
commit_width = 128                      # Commit bandwidth (instructions per cycle), per SMT thread
in_order = false
issue_contention = true
issue_memops_at_issue = true  # Issue memops to the memory hierarchy at issue time (false = before dispatch)
mlp_histogram = false
outstanding_loads = 48
outstanding_stores = 32
rob_repartition = true
rs_entries = 36
simultaneous_issue = true
store_to_load_forwarding = true

[perf_model/core/interval_timer]
dispatch_width = 5
window_size = 128
num_outstanding_loadstores = 10

[perf_model/core/static_instruction_costs]
add = 1
sub = 1
mul = 3
div = 12  # 4-12 Word, 4-20 64-bit
fadd = 4
fsub = 4
fmul = 4
fdiv = 11  # 6-11 s form, 6-18 d form
generic = 1 
jmp = 1
string = 1
branch = 1
dynamic_misc = 1
recv = 1
sync = 0
spawn = 0
tlb_miss = 0
mem_access = 0
delay = 0
unknown = 0

[perf_model/branch_predictor] 
type = pentium_m
mispredict_penalty = 15
size = 1024  # ??

#https://github.com/ucb-bar/riscv-boom/blob/master/src/main/scala/common/configs.scala
[perf_model/cache]
levels = 2

[perf_model/tlb]
penalty = 30   # "variable number of cycles"

[perf_model/itlb]
size = 32 # Number of I-TLB entries
associativity = 32 # full associative

[perf_model/dtlb]
size = 32 # Number of D-TLB entries
associativity = 32 # fully associative

[perf_model/stlb]
size = 1024 # Number of second-level TLB entries
associativity = 4 # S-TLB associativity

[perf_model/l1_icache]
cache_block_size = 64 # in B
cache_size = 32 # in KB
associativity = 4
replacement_policy = lru
writethrough = 0
perfect = false
passthrough = false
coherent = true
data_access_time = 3
tags_access_time = 1
perf_model_type = parallel
writeback_time = 0    # Extra time required to write back data to a higher cache level
dvfs_domain = core    # Clock domain: core or global
shared_cores = 1      # Number of cores sharing this cache
next_level_read_bandwidth = 0 # Read bandwidth to next-level cache, in bits/cycle, 0 = infinite
prefetcher = none
address_hash = mask

[perf_model/l1_dcache]
cache_block_size = 64
cache_size = 32 # in KB
associativity = 4
replacement_policy = lru
prefetcher = none  #simple  #??
writethrough = 0
perfect = false
passthrough = false
address_hash = mask
data_access_time = 3
tags_access_time = 1
perf_model_type = parallel
writeback_time = 0    # Extra time required to write back data to a higher cache level
dvfs_domain = core    # Clock domain: core or global
shared_cores = 1      # Number of cores sharing this cache
outstanding_misses = 0
next_level_read_bandwidth = 0 # Read bandwidth to next-level cache, in bits/cycle, 0 = infinite

[perf_model/l2_cache]
cache_block_size = 64 # in bytes
cache_size = 1024 # in KB
associativity = 16
replacement_policy = lru
data_access_time = 8 # Maximum from the overall RAM latency calculation table, tech ref manual
tags_access_time = 5 # Maximum from the overall RAM latency calculation table, tech ref manual
writeback_time = 2 # approx of 1.5 ns; 3 cycles at 2 GHz; Extra time required to write back data to a higher cache level
prefetcher = none # optional
next_level_read_bandwidth = 1 # 2 cycles at 2 GHz; Read bandwidth to next-level cache, in bits/cycle, 0 = infinite
writethrough = 0
perfect = false
passthrough = false
address_hash = mask
dvfs_domain = core    # Clock domain: core or global
shared_cores = 1      # Number of cores sharing this cache
outstanding_misses = 0
perf_model_type = parallel

[perf_model/llc]
evict_buffers = 20 # minimum from the manual: "Configurable number of Fill/Eviction Queue (FEQ) entries to 20, 24, or 28."

[caching_protocol]
type = parametric_dram_directory_msi
variant = mesi # msi, mesi or mesif

[perf_model/dram_directory]
total_entries = 16384
associativity = 16
directory_type = full_map # Supported (full_map, limited_no_broadcast, limitless)

[perf_model/dram]
type = constant # DRAM performance model type: "constant" or a "normal" distribution
latency = 100 # In nanoseconds
per_controller_bandwidth = 5 # In GB/s
num_controllers = -1 # Total Bandwidth = per_controller_bandwidth * num_controllers
controllers_interleaving = 0 # If num_controllers == -1, place a DRAM controller every N cores
chips_per_dimm = 8
dimms_per_controller = 4

[perf_model/sync]
reschedule_cost = 0 # In nanoseconds

[network/bus]
ignore_local_traffic = true # Do not count traffic between core and directory on the same tile
bandwidth = 25.6 # in GB/s. Actually, it's 12.8 GB/s per direction and per connected chip pair

[dvfs]
type = simple
transition_latency = 0 # In nanoseconds
