#include  ./mmu_configs/mmu_spec.cfg
#include  ./pagetable_configs/4_level_radix.cfg
#include  ./dram_configs/ddr4_2400.cfg
#include  ./physical_memory_allocators/reserve_thp.cfg
#include ./spec_engine_configs/spec_engine_spectlb.cfg
#include  ./pagetable_configs/range_table.cfg

[general]
total_cores = 1
native_environment = "true" # Set to true if running on a real machine, false if running on a VM
virtualized_environment = "false" # Set to true if running on a VM, false if running on a real machine
translation_enabled = "true" # Set to true if we want to enable address translation in each core 
# Set this to false if you want to do "idealistic" studies and measure the performance of the system without any address translation overhead
enable_icache_modeling = false


[perf_model/core]
frequency = 2.9 # In GHz
logical_cpus = 1 # Number of logical CPUs per core
core_model = "nehalem"
type = "rob"


[perf_model/sync]
reschedule_cost = 1000 # Cost of rescheduling a thread (ns)

[clock_skew_minimization/barrier]
quantum = 1000                       # Synchronize after every quantum (ns)

[perf_model/branch_predictor]
type = pentium_m
mispredict_penalty=8 # Reflects just the front-end portion (approx) of the penalty for Interval Simulation



[perf_model/core/rob_timer]
in_order = false
issue_contention = true
mlp_histogram = false           # Collect histogram of memory-level parallelism (slow)
issue_memops_at_issue = true    # Issue memops to the memory hierarchy at issue time (false = before dispatch)
outstanding_loads = 72
outstanding_stores = 56
store_to_load_forwarding = true # Forward data to loads from stores that are still in the store buffer
address_disambiguation = true   # Allow loads to bypass preceding stores with an unknown address
rob_repartition = true          # For SMT model with static ROB partitioning, whether to repartition the ROB
                                # across all active threads (true), or keep everyone fixed at a 1/nthreads share (false)
simultaneous_issue = true       # Whether two different threads can execute in a single cycle. true = simultaneous multi-threading, false = fine-grained multi-threading
commit_width = 8                # Commit bandwidth (instructions per cycle), per SMT thread
rs_entries = 97

[perf_model/core/interval_timer]  # though the core type is ROB, still it uses dispatch_width and window_size from interval_time knob
dispatch_width = 8     # Number of instructions dispatched per cycle
window_size = 224 # Size of the instruction window (ROB) in instructions

[dvfs]
transition_latency = 2000 # In ns, "under 2 microseconds" according to http://download.intel.com/design/intarch/papers/323671.pdf (page 8)

[dvfs/simple]
cores_per_socket = 1

[power]
vdd = 1.2 # Volts
technology_node = 45 # nm


## ---- Memory Subsystem ---- ##


[perf_model/cache]
levels = 2 # Number of cache levels, excluding the NUCA cache

[perf_model/cache]
mshr_size = 32 # Number of MSHRs in the L2 cache [Fix: make better use of this knob]


[perf_model/l1_dcache]
perfect = false
cache_size = 32
associativity = 8
address_hash = mask
replacement_policy = lru
data_access_time = 4
tags_access_time = 1
perf_model_type = parallel
writethrough = 0
shared_cores = 1
prefetcher = "none"
outstanding_misses = 16 # Sniper uses a different performance model for the MSHRs in the L1 cache. This knob specifies the number of outstanding misses in the L1 cache.

[perf_model/l1_dcache/prefetcher/simple]
flows=10
flows_per_core = true
num_prefetches = 2
stop_at_page_boundary = false



[perf_model/l1_icache]
perfect = false
cache_size = 32
associativity = 8
address_hash = mask
replacement_policy = lru
data_access_time = 4
tags_access_time = 1
perf_model_type = parallel
writethrough = 0
shared_cores = 1

[perf_model/l1_dcache/prefetcher]
prefetch_on_prefetch_hit = true

[perf_model/l1_dcache/prefetcher/ip_stride]
allocate_on_miss = "false"
num_prefetches = 2
num_streams = 64
stop_at_page_boundary = "true"
lookahead = 4

[perf_model/l1_dcache/prefetcher]
prefetch_on_prefetch_hit = true

[perf_model/l2_cache]
associativity = 16
cache_size = 2048 # In KB
data_access_time = 16
tags_access_time = 3
prefetcher = "none"
writeback_time = 50 # L3 hit time will be added
perf_model_type = parallel
writethrough = 0
shared_cores = 1


[perf_model/l2_cache/prefetcher]
prefetch_on_prefetch_hit = true


[perf_model/l2_cache/prefetcher/streamer]
allocate_on_miss = "true"
num_prefetches = 2
num_streams = 64
prefetch_front = 4
max_conf = 7
conf_thresh = 2

[perf_model/l2_cache/prefetcher/simple]
flows=10
flows_per_core = true
num_prefetches = 2
stop_at_page_boundary = false


[perf_model/l2_cache/srrip]
bits = 2
tlb_enabled = false

[perf_model/l2_cache/qbs]
attempts = 4 # Total number of lines that will be considered, last one is forced


[perf_model/l2_cache/prefetcher/streamer]
allocate_on_miss = "true"
num_prefetches = 2
num_streams = 64
prefetch_front = 4
max_conf = 7
conf_thresh = 2

[perf_model/nuca]
enabled = "true"
address_hash = "mask"
cache_size = 2048 # This is per NUCA slice, so the total cache size is cache_size * num_slices ( = num_cores)
associativity = 16
replacement_policy = "srrip" # Static Re-Reference Interval Prediction
tags_access_time = 15     # In cycles. Optimistic timing
data_access_time = 35    # In cycles, parallel with tag access. Optimistic timing
bandwidth = 64           # In GB/s

[perf_model/nuca/cache/srrip]
bits = 2
tlb_enabled = false

[perf_model/nuca/cache/qbs]
attempts = 2 # Total number of lines that will be considered, last one is forced


[perf_model/nuca/queue_model]
enabled = true
type = history_list

[perf_model/mmu/range_lb]
num_sets = 64
latency = 12

[perf_model/utopia]
enabled = "false"

[perf_model/cache_usage]
enabled = false

[perf_model/metadata]
shadow_cache_enabled= "false"
shadow_cache_size = 16
shadow_cache_associativity = 8
shadow_cache_hit_latency = 1
shadow_cache_miss_latency = 2
passthrough_loc = 2

[perf_model/mimicos_host]
enabled = "false"
page_fault_latency = 2000



[log]
enabled=false


[queue_model/basic]
moving_avg_enabled = "true"
moving_avg_type = "arithmetic_mean"
moving_avg_window_size = 1024





