#!/usr/bin/env python3

import re

rx = re.compile('#define __NR_(.*?)\s+(.*)')
ry = re.compile('\(__NR_(.*?)\+(\d+)\)')

out_cc = open('common/misc/syscall_strings.cc', 'w')
out_py = open('scripts/syscall_strings.py', 'w')

print('''\
// Automatically generated by %s

#include "syscall_strings.h"

const char * syscall_string(int syscall_number)
{
   switch(syscall_number)
   {
''' % __file__, file=out_cc)

print('''\
# Automatically generated by %s
''' % __file__, file=out_py)

def make(bits):
  seen = set()
  names = {}
  for line in open('/usr/include/asm/unistd_%d.h' % bits, 'r').readlines():
    m = rx.match(line)
    if m:
      name, number = m.group(1), m.group(2)

      mm = ry.match(number)
      if mm:
        number = names[mm.group(1)] + int(mm.group(2))
      else:
        try:
          number = int(number.split()[0])
        except ValueError:
          continue

      if number not in seen:
        seen.add(number)
        names[name] = number
        print('      case %s: return "%s";' % (number, name), file=out_cc)
        print('  %s: "%s",' % (number, name), file=out_py)

print('#ifdef TARGET_IA32', file=out_cc)
print('syscall_strings_32 = {', file=out_py)
make(32)
print('#else', file=out_cc)
print('}', file=out_py)
print('syscall_strings_64 = {', file=out_py)
make(64)
print('#endif', file=out_cc)
print('''
}

# Determine whether we're in 32-bit or 64-bit mode
import sys
if sys.maxsize == 2**31-1:
  syscall_strings = syscall_strings_32
else:
  syscall_strings = syscall_strings_64
''', file=out_py)

print('''\
      default: return "(unknown)";
   }
}
''', file=out_cc)
