##############################################################
# 
# Copyright (C) 2021-2021 Intel Corporation.
# SPDX-License-Identifier: MIT
# 
##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# Define the SDE example pin tools to build
SDE_TOOLS :=
PINPLAY_TOOLS :=

TOOL_ROOTS := $(SDE_TOOLS) $(PINPLAY_TOOLS)

##############################################################
#
# Build rules
#
##############################################################

# See makefile.default.rules for the default build rules.

ARCH_QUERY = $(shell uname -m)
ifeq ($(ARCH_QUERY),i686)
	TARGET_ARCH = -DTARGET_IA32
else
	ifeq ($(ARCH_QUERY),x86_64)
		TARGET_ARCH ?= -DTARGET_INTEL64
	else
		$(error Unknown target arch: $(ARCH_QUERY))
	endif
endif

ROOT_DIR:=$(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

TOOL_CXXFLAGS := -I$(SDE_ROOT)/include -I./sift $(TOOL_CXXFLAGS)
TOOL_CXXFLAGS += -DSDE_INIT -DPINPLAY -I$(PINPLAY_ROOT)/include

ifeq ($(OS),Windows_NT)
TOOL_LPATHS += /LIBPATH:$(SDE_ROOT)/lib/$(TARGET) /LIBPATH:$(PINPLAY_ROOT)/$(TARGET)
TOOL_LPATHS += libpinplay.lib libsde.lib bz2.lib zlib.lib
else
# sde and pinplay libraries appears twice to avoid circular dependency
TOOL_LPATHS += -L$(SDE_ROOT)/lib/$(TARGET) -L$(PINPLAY_ROOT)/$(TARGET)
TOOL_LPATHS += -lpinplay -lsde -lpinplay -lsde -lbz2 -lzlib
endif

ifneq ($(DEBUG_SHOW_COMPILE),)
  SHOW_COMPILE=1
  MAKE_QUIET=
  _MSG=@echo >/dev/null
  _CMD=
else
  SHOW_COMPILE=
  MAKE_QUIET=--quiet
  _MSG=@echo
  _CMD=@
endif

###### Special libs' build rules ######

LINK_LIBS = sift/$(OBJDIR)libsift.a $(PINPLAY_LIBS)

SOURCES=$(wildcard *.cc) $(wildcard ../bbv_count.cc)
OBJECTS=$(patsubst %.cc,$(OBJDIR)%$(OBJ_SUFFIX),$(SOURCES))

all: sift/$(OBJDIR)libsift.a $(OBJDIR)sde_sift_recorder$(PINTOOL_SUFFIX)

$(OBJDIR)%$(OBJ_SUFFIX) : %.cc $(wildcard *.h)
	$(_MSG) '[CXX   ]' $(subst $(shell readlink -f $(ROOT_DIR)/../..)/,,$(shell readlink -f $@))
	$(_CMD) $(CXX) $(TOOL_CXXFLAGS) -I$(ROOT_DIR)/sift -I$(ROOT_DIR)/.. $(TARGET_ARCH) $(COMPILE_PIN_FLAGS) -c -o $@ $< $(CXXFLAGS)

sift/sift_reader.h: sift
	@for i in $(wildcard $(ROOT_DIR)/../../sift/*.h) $(wildcard $(ROOT_DIR)/../../sift/*.cc) ; do ln -fs $$i sift/. ; done
	@ln -fs $(ROOT_DIR)/../../common/misc/fixed_types.h sift/.

# Build libsift against PinCRT
sift/$(OBJDIR)libsift.a: sift/sift_reader.h $(wildcard sift/*.h) $(wildcard sift/*.cc)
	@$(MAKE) -C sift

CC ?= gcc
CXX ?= g++
# export PYTHONPATH := $(SDE_BUILD_KIT)/pinplay-tools/pinplay-scripts:$(SIM_ROOT)/mbuild
export PYTHONPATH := $(SDE_BUILD_KIT)/pinplay-tools/pinplay-scripts:$(SDE_BUILD_KIT)/pinkit/sde-example/mbuild
$(OBJDIR)sde_sift_recorder$(PINTOOL_SUFFIX): $(wildcard *.cc *.h sift/*.cc sift/*.h)
ifeq ($(ARCH_QUERY),x86_64)
	@CC=$(CC) CXX=$(CXX) ./mfile.py --host-cpu intel64
else
	@CC=$(CC) CXX=$(CXX) ./mfile.py --host-cpu ia32
endif

CLEAN=$(findstring clean,$(MAKECMDGOALS))

ifneq ($(CLEAN),clean)
-include $(patsubst %.cpp,%.d,$(patsubst %.c,%.d,$(patsubst %.cc,%.d,$(SOURCES))))
endif

clean: cleanall

cleanall:
	rm -f *.o
	make -C sift clean
